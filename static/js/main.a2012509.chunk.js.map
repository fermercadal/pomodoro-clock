{"version":3,"sources":["Components/TimeInput/TimeInput.js","Components/Clock/Clock.js","Components/Tomato/Tomato.js","sound.mp3","App.js","serviceWorker.js","index.js"],"names":["TimeInput","cyclePrefix","this","props","title","className","id","time","onClick","handleDecrease","handleIncrease","Component","Clock","convertToTime","count","minutes","Math","floor","seconds","bind","cycle","clock","isPlaying","handlePlay","handleReset","Tomato","class","App","handleSessionDecrease","sessionTime","state","setState","updateCount","handleSessionIncrease","handleBreakDecrease","breakTime","handleBreakIncrease","started","clockCount","clearInterval","loop","setInterval","playSound","audio","document","getElementById","pause","currentTime","undefined","value","play","breakProps","sessionProps","preload","src","Sound","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2012509.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TimeInput extends Component {\n  render() {\n    const cyclePrefix = this.props.title === 'Session' ? 'session' : 'break';\n\n    return (\n      <div className=\"time-input\">\n          <h3 id={`${ cyclePrefix }-label`}>{ this.props.title } length</h3>\n          \n          <span id={`${ cyclePrefix }-length`}>{ this.props.time }</span>\n\n          <div className=\"buttons\">\n            <button \n              id={`${ cyclePrefix }-decrement`}\n              className=\"decrease\"\n              onClick={ this.props.handleDecrease }>\n              Decrease value\n            </button>\n\n            <button \n              id={`${ cyclePrefix }-increment`}\n              className=\"increase\"\n              onClick={ this.props.handleIncrease }>\n              Increase value\n            </button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default TimeInput;","import React, { Component } from 'react';\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.convertToTime = this.convertToTime.bind(this);\n  }\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\n\n    return `${ minutes }:${ seconds }`;\n  }\n\n  render() {\n    return (\n      <div className=\"running-clock\">\n        <h2 id=\"timer-label\">{ this.props.cycle } Time</h2>\n\n        <div id=\"time-left\">\n          { this.convertToTime(this.props.clock) }\n        </div>\n\n        <div className=\"buttons\">\n          <button \n            id=\"start_stop\"\n            className={ this.props.isPlaying ? 'pause' : 'play' }\n            onClick={ this.props.handlePlay }>\n            { this.props.isPlaying ? 'Pause' : 'Play' }\n          </button>\n\n          <button \n            id=\"reset\"\n            className=\"reset\"\n            onClick={ this.props.handleReset }>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;","import React, { Component } from 'react';\nimport './Tomato.scss';\n\nclass Tomato extends Component {\n  render() {\n    const cyclePrefix = this.props.title === 'Session' ? 'session' : 'break';\n\n    return (\n      <div className=\"tomato-container\">\n        <div className=\"tomato\">\n          <span className=\"green\" />\n\n          <span className=\"face-container\">\n            <span class=\"glasses\">\n              <span className=\"cristal\" />\n              <span className=\"cristal\" />\n            </span>\n\n            <span class=\"sunglasses\">\n              <span className=\"cristal\" />\n              <span className=\"cristal\" />\n            </span>\n\n            <span className=\"eye\" />\n            <span className=\"eye\" />\n\n            <span className=\"smile\" />\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tomato;","export default __webpack_public_path__ + \"static/media/sound.4e01a247.mp3\";","import React, { Component } from 'react';\nimport './App.scss';\n\nimport TimeInput from './Components/TimeInput/TimeInput';\nimport Clock from './Components/Clock/Clock';\nimport Tomato from './Components/Tomato/Tomato';\n\nimport Sound from './sound.mp3';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cycle: 'Session',\n      sessionTime: 25,\n      breakTime: 5,\n      clockCount: 0,\n      started: false,\n      isPlaying: false\n    }\n\n    this.loop = undefined;\n\n    this.handleBreakDecrease = this.handleBreakDecrease.bind(this);\n    this.handleBreakIncrease = this.handleBreakIncrease.bind(this);\n    this.handleSessionDecrease = this.handleSessionDecrease.bind(this);\n    this.handleSessionIncrease = this.handleSessionIncrease.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  componentDidMount() {\n    const sessionTime = this.state.sessionTime;\n\n    this.setState({\n      clockCount: sessionTime * 60\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handleSessionDecrease = () => {\n    const sessionTime = this.state.sessionTime;\n\n    if(sessionTime - 1 > 0) {\n      this.setState({\n        cycle: 'Session',\n        sessionTime: sessionTime - 1\n      });\n\n      this.updateCount((sessionTime - 1));\n    }\n  }\n\n  handleSessionIncrease = () => {\n    const sessionTime = this.state.sessionTime;\n\n    if(sessionTime + 1 < 61) {\n      this.setState({\n        cycle: 'Session',\n        sessionTime: sessionTime + 1\n      });\n\n      this.updateCount((sessionTime + 1))\n    }\n  }\n\n  handleBreakDecrease = () => {\n    const breakTime = this.state.breakTime;\n\n    if(breakTime - 1 > 0) {\n      this.setState({\n        cycle: 'Break',\n        breakTime: breakTime - 1\n      });\n\n      this.updateCount((breakTime - 1))\n    }\n  }\n\n  handleBreakIncrease = () => {\n    const breakTime = this.state.breakTime;\n\n    if(breakTime + 1 < 61) {\n      this.setState({\n        cycle: 'Break',\n        breakTime: breakTime + 1\n      });\n\n      \n      this.updateCount((breakTime + 1))\n    }\n\n  }\n\n  updateCount(value) {\n    this.setState({\n      clockCount: value * 60\n    });\n  }\n\n  handlePlay = () => {\n    const isPlaying = this.state.isPlaying;\n    const sessionTime = this.state.sessionTime;\n    const started = this.state.started;\n\n    if(!started) {\n      this.setState({\n        clockCount: sessionTime * 60,\n        cycle: 'Session',\n        started: true\n      });\n    }\n    \n    if(isPlaying) {\n      clearInterval(this.loop);\n\n      this.setState({\n        isPlaying: false\n      });\n    }\n    else {\n      this.setState({\n        isPlaying: true\n      });\n\n      this.loop = setInterval(() => {\n        const clockCount = this.state.clockCount;\n        const cycle = this.state.cycle;\n        const breakTime = this.state.breakTime;\n        const sessionTime = this.state.sessionTime;\n\n        if(clockCount === 0) {\n          this.setState({\n            cycle: cycle === 'Session' ? 'Break' : 'Session',\n            clockCount: cycle === 'Session' ? (breakTime * 60) : (sessionTime * 60)\n          });\n\n          this.playSound();\n        } \n        else {\n          this.setState({\n            clockCount: clockCount - 1\n          });\n        }        \n      }, 1000);\n    }\n  }\n\n  playSound() {\n    let audio = document.getElementById('beep');\n    audio.currentTime = 0;\n    audio.play();\n  }\n\n  handleReset = () => {\n    this.setState({\n      cycle: 'Session',\n      sessionTime: 25,\n      breakTime: 5,\n      clockCount: 25 * 60,\n      started: false,\n      isPlaying: false\n    });\n\n    clearInterval(this.loop);\n\n    let audio = document.getElementById('beep');\n    audio.pause();\n    audio.currentTime = 0;\n  }\n\n  render() {\n    const breakProps = {\n      title: 'Break',\n      time: this.state.breakTime,\n      handleDecrease: this.handleBreakDecrease,\n      handleIncrease: this.handleBreakIncrease\n    }\n\n    const sessionProps = {\n      title: 'Session',\n      time: this.state.sessionTime,\n      handleDecrease: this.handleSessionDecrease,\n      handleIncrease: this.handleSessionIncrease\n    }\n\n    return (\n      <div className={`App ${ this.state.cycle }`}>\n        <main id=\"clock\" className=\"clock\">\n          <h1>Pomodoro clock</h1>\n\n          <Tomato />\n\n          <div class=\"clock-container\">\n            <Clock\n              handlePlay={ this.handlePlay }\n              handleReset={ this.handleReset }\n              clock={ this.state.clockCount }\n              cycle={ this.state.cycle }\n              isPlaying={ this.state.isPlaying }\n            />\n\n            <audio id=\"beep\" preload=\"auto\" src={ Sound } />\n\n            <div className=\"set-timber\">\n              <TimeInput {...sessionProps} />\n              <TimeInput {...breakProps} />\n            </div>\n          </div>\n        </main>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}